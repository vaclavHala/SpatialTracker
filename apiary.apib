FORMAT: 1A

# Spatial Tracker APIs
For now we go with HTTP Basic Auth,
so all calls asume Authentication header is present
For further versions either:
- HMAC http://restcookbook.com/Basics/loggingin/
- SSL 
- OAuth

# Group Users

## New User [/user]
Create a new account for the user

### Register New [POST]
+ Request (application/json)
    +Attributes (object)
        + login: `dragon` (string, required)
        + email: `dragon@dungeon.com` (string, required)
        + password: `sEcrEt123` (string, required)

+ Response 201

    User account was created
    
    + Headers
    
            Location: `base/uri/to/tracker/user/new_user`
    
+ Response 400 (application/json)
    + Attributes (object)
        + errors (array)
            + `name taken` (string)
            + `invalid email` (string)
            + `missing password` (string)


## Some User [/user/{login}]
    Anyone can view details of any user.
    To edit or delete user credentials for that user must
    be supplied instead of just login.
+ Parameters

    + login: `pepa.zdepa` (string) Users login processed to be URL friendly
    
### Show Details [GET]
+ Response 200 (application/json)
    + Attributes (object)
        + login: `CoolKidO` (string, required)
        + first_name: `Pepa` (string)
        + last_name: `Zdepa` (string)
        + email: `foo@bar.baz` (string)
        + icon: binary 
    
+ Response 404

    User with this login does not exist
    
    + Body

## Current User [/user/me]
    Credentials are included in the request and 
    the server will operate on the user with matching credentials,
    if such user exists.
    It is up to the client app to display authentication form
    when action requiring authentication is invoked and 
    the current user is not known.
    It should then remember the entered credentials
    for further requests requiring authentication.

### Show Details [GET]

+ Response 200 (application/json)

    The Response looks exactly the same as if GET
    using the current users login was called.
    However the client app needs to recognize we are
    looking at the current user (me), so it should provide
    extra buttons for editing and deleting the user.
    
    + Body
    
+ Response 403 (application/json)

    No user with matching credentials exists
    
    + Body
    
### Update User Details [PUT]
+ Response 204

    TODO Do we allow editing of user as a whole, by parts...
    User updated succesfully
    
    + Body

+ Response 403

    No user with matching credentials exists
    
    + Body

### Delete User [DELETE]
+ Response 204

    User deleted succesfully
    
    + Body

+ Response 403

    No user with matching credentials exists
    
    + Body
    
# Group Issues

## New Issue [/issue]
    User has to be logged in to report an issue.
    The login and password in Basic auth header 
    will be used to identify the user and the user
    will be added as author to the issue.
    If incorrect credentials are provided when invoking
    this call, the issue will not be persisted.

### Report Issue [POST]
+ Request (application/json)
    + Attributes (object)
        + subject: Stuffs' broke (string, required)
        + description: Detailed description of what is wrong. (string)
        + photo: Base64 encoded PNG (string)
        + category (enum, required)
            + Members
                + Add - Missing benches / trash cans...
                + Remove - ?
                + Repair - Graffiti, street lamps don't work...
                + Complaint - ?
                + Other - User should provide specific description
        + priority (enum, required) 
            classic MoSCoW, simple enough?
            + Members
                + MustHave
                + ShouldHave 
                + CanHave
                + WantToHave
        + location (object) - where the issue is located 
            + lat: 37.423021 - latitude (positive or negative)
            + lon: 122.083739 - longitude
        
+ Response 201

    Issue was created
    
    + Headers
    
            Location: base/uri/to/tracker/issue/new_issue
    
+ Response 400 (application/json)
    + Attributes (object)
        + errors (array)
            + subject must be filled in (string)
            + selected location is out of bounds (string)

## All Issues [/issue{?filter}]
    Everyone can see all issues.
    Different clients will want to 

### List Issues [GET]
+ Parameters 
    
    + filter: lat:1.91,1.92;lon:2.12,2.14 (string)
    Filter can be anything: filter from category,
    by author, by location...
    It gets parsed by the server, format is TODO
    
+ Response 200 (application/json)
    + Attributes (array)
        + issue (object)
            + subject: Stuffs' broke (string)
            + description: Detailed description of what is wrong. (string)
            + author: John Doe (string)
            + category (enum) - same domain as in create
            + priority (enum) - same domain as in create
            + status (enum) - modifiable by workers
                + Members
                    + Reported
                    + Accepted
                    + Rejected
                    + Fixed
            + location (object) - where the issue is located 
                + lat: 37.423021 - latitude
                + lon: 122.083739 - longitude


    