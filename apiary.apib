FORMAT: 1A

# Users API

For now we go with HTTP Basic Auth,
so all calls asume Authentication header is present

For further versions either:
- HMAC http://restcookbook.com/Basics/loggingin/
- SSL 
- OAuth

# New User [/user]
Create a new account for the user

## Register New [POST]
+ Request (application/json)
    + Attributes (object)
        + login: dragon (string, required)
        + email: dragon@dungeon.com (string, required)
        + password: sEcrEt123 (string, required)

+ Response 201

    User account was created
    
    + Body
    
+ Response 409 (application/json)
    + Attributes (object)
        + cause: name taken (string)


# Some User [/user/{login}]
    Anyone can view details of any user.
    To edit or delete user credentials for that user must
    be supplied instead of just login.
+ Parameters

    + login: pepa.zdepa (string) Users login processed to be URL friendly
    
## Show Details [GET]
+ Response 200 (application/json)
    + Attributes (object)
        + login: CoolKidO (string, required)
        + first_name: Pepa (string)
        + last_name: Zdepa (string)
        + email: foo@bar.baz (string)
        + icon: binary 
    
+ Response 404

    User with this login does not exist
    
    + Body

# Current User [/user/me]
    Credentials are included in the request and 
    the server will operate on the user with matching credentials,
    if such user exists.
    It is up to the client app to display authentication form
    when action requiring authentication is invoked and 
    the current user is not known.
    It should then remember the entered credentials
    for further requests requiring authentication.

## Show Details [GET]

+ Response 200 (application/json)

    The Response looks exactly the same as if GET
    using the current users login was called.
    However the client app needs to recognize we are
    looking at the current user (/me), so it should provide
    extra buttons for editing and deleting the user.
    
    + Body
    
+ Response 403 (application/json)

    No user with matching credentials exists
    
    + Body
    
## Update User Details [PUT]
+ Response 204

    TODO Do we allow editing of user as a whole, by parts...
    User updated succesfully
    
    + Body

+ Response 403

    No user with matching credentials exists
    
    + Body

## Delete User [DELETE]
+ Response 204

    User deleted succesfully
    
    + Body

+ Response 403

    No user with matching credentials exists
    
    + Body